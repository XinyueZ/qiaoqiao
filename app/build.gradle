project.ext.DEV = "src/dev"
project.ext.LIVE = "src/live"
project.ext.ASSET_DIR = projectDir.toString() + '/assets'

assert file(project.ext.LIVE + "/google-services.json").exists()
assert file(project.ext.LIVE + "/resources/key.properties").exists()
assert file(project.ext.DEV  + "/google-services.json").exists()
assert file(project.ext.DEV + "/resources/key.properties").exists()

buildscript {
    repositories {
        maven { url 'https://maven.fabric.io/public' }
    }

    dependencies {
        classpath 'io.fabric.tools:gradle:1.+'
    }
}
apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'io.fabric'
apply plugin: 'realm-android'

repositories {
    maven { url 'https://maven.fabric.io/public' }
    mavenCentral()
}


def buildNumber = 'bld' + (System.env.BUILD_NUMBER ?: 'SNAPSHOT')
def globalConfiguration = rootProject.extensions.getByName("ext")

android {

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    configurations {
        all*.exclude module: 'support-v4'
        all*.exclude module: 'mediarouter-v7'
    }



    compileSdkVersion globalConfiguration.getAt("compileSdkVersion")
    buildToolsVersion globalConfiguration.getAt("buildToolsVersion")

    defaultConfig {
        multiDexEnabled = true
        vectorDrawables.useSupportLibrary = true

        versionName globalConfiguration.getAt("versionName")
        versionCode globalConfiguration.getAt("versionCode")
        applicationId globalConfiguration.getAt("applicationId")
        minSdkVersion globalConfiguration.getAt("minSdkVersion")
        targetSdkVersion globalConfiguration.getAt("targetSdkVersion")

        //      testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        testInstrumentationRunner globalConfiguration.getAt("testInstrumentationRunner")
    }


    dataBinding {
        enabled = true
    }

    flavorDimensions "app"

    productFlavors {
        dev {
            dimension "app"
            applicationId project.APP_DEV_APPLICATIONID
        }
        live {
            dimension "app"
            applicationId project.APP_APPLICATIONID
        }
    }


    signingConfigs {
        release {
            storeFile = file(globalConfiguration.getAt("storeFile"))
            storePassword = globalConfiguration.getAt("storePassword")
            keyAlias = globalConfiguration.getAt("keyAlias")
            keyPassword = globalConfiguration.getAt("keyPassword")
        }

        debug {
            //Default:  "../signing/debug.keystore"
            storeFile = file(globalConfiguration.getAt("debugStoreFile"))
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    lintOptions {
        htmlReport false
        abortOnError false
    }

    packagingOptions {
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/INDEX.LIST'
        exclude 'META-INF/MANIFEST.MF'
        exclude 'com/google/cloud/project.properties'
        exclude 'META-INF/io.netty.versions.properties'
    }


    dexOptions {
        preDexLibraries true
        javaMaxHeapSize project.JAVA_MAX_HEAP_SIZE
    }

    aaptOptions {
        noCompress "lite"
    }

    testOptions { // <-- You need this
        unitTests {
            returnDefaultValues = true
            includeAndroidResources = true
        }

        unitTests.all {
            // All the usual Gradle options.
            testLogging {
                events "passed", "skipped", "failed", "standardOut", "standardError"
                outputs.upToDateWhen { false }
                showStandardStreams = true
            }
        }

    }
}


dependencies {

    rootProject.appDependencies.each {
        add(it.configuration, it.dependency, it.options)
    }
    implementation('com.crashlytics.sdk.android:crashlytics:2.6.8@aar') {
        transitive = true
    }
}


gradle.projectsEvaluated {
    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xmaxerrs" << "500" // or whatever number you want
    }
}

// Rename final apks
//android.applicationVariants.all { variant ->
//    variant.outputs.each { output ->
//        output.outputFile = new File(
//                output.outputFile.parent, output.outputFile.name.replace("_Android", "")
//                .replace(".apk", "-${android.defaultConfig.versionName}${buildNumber}.apk"))
//    }
//}

kapt {
    useBuildCache = true
}

apply plugin: 'com.google.gms.google-services'
